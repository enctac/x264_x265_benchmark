x264_x265_benchmark

x264/x265ベンチマークバッチ ：【x264_x265_benchmark_20170730】
システム情報収集支援バッチ　：【CPUZtoText_20170730】

★重要
　→変なことはしていないはずですが、このバッチによって
　　何らかの損害が発生したとしても、作者は一切責任を負いません。
　　自己責任でご利用ください。

★検証協力のお願い
　システム情報収集支援バッチが色々な環境で問題なく動くかどうか検証したいと思っています。
　色々な環境のログが欲しいので、バッチ実行後にできる
　　.\bin\cpu-z-log.txt
　というCPU-Zのログファイルをどこかにアップロードしていただけると助かります。
　全てのシステム情報を知られたくない場合は、問題が起きている項目に
　関連する部分だけでも抜粋してご提供いただければ幸いです。


■これは何ですか？

　→x264とx265のエンコード速度を計測するベンチマークテストです。
　　x264とx265のベンチマークを一括で実行することが可能です。

　→下記のスレ向けに作ってみたものです。
　　　【x264+Avisynth】実用エンコベンチ Part5.1
　　　　http://egg.2ch.net/test/read.cgi/jisaku/1460032466/

　→CPU-Zのログから自動でシステム情報を抽出しているので
　　それらを自分で調べて書く必要がなくなりました。
　　(※ただし取れない情報や不確実な部分もあるので、
　　　　チェックや追記が必要な場合もあります）

　→従来のx264ベンチマークでは --demuxer lavf を使っていたので
　　それをサポートするようにビルドしたx264しか使えませんでしたが、
　　ffmpegからのy4m渡しにしたので、ほとんどのビルドが使えるようになっています。
　　出力もmp4ではなくmkvにしたので、MP4出力をサポートしていないものでも大丈夫です。
　　（VideoLAN版やrigaya版も使えます）

　→単純なバッチなので、コピペ等で編集すれば異なるオプションでのテストなども簡単です。
　　おまけとして、QSVEncC等を使ったテスト用バッチなども同梱してあります。

　→テスト用の動画としては、
　　　　http://x265.ru/x265-hd-benchmark/
　　の「x265 HD Benchmark」に入っている「test-1080p.mkv」を想定していますが、
　　下の「おまけ機能」のところで説明しているように、動画ファイルをバッチファイルに
　　ドラッグ＆ドロップすれば、その動画でテストを行うことができます。
　　なお「test-1080p.mkv」は、従来のx264ベンチマークで使っていた
　　「1920.ts」とは異なります。

　　　・test-1080p.mkv → 1920x1080p, 24000/1001fps, 1128frames, AVC, 8264Kbps
　　　・1920.ts　　　　→ 1920x1080i, 30000/1001fps, 1800frames, MPEG2, 24.3Mbps


★注意事項

　→今のところ、以下の環境とバイナリで動作を確認しています。
　　・環境 → 「ベンチマーク結果のサンプル.txt」を参照
　　・CPU-Z →　1.8.0
　　・ffmpeg → Zeranoe版 N-86723-g3b3501f
　　・x264 → Komisar版 r2851kMod
　　・x265 → rigaya版 2.5+3

　→システム情報収集支援バッチについては、入手できたログが少なく、
　　パターンが網羅できていないかもしれないので、うまくいかないケースもあるかもしれません。


■実行前の準備と、ベンチマークの実行

　０．エンコード素材として、
　　　　http://x265.ru/x265-hd-benchmark/
　　　の「x265 HD Benchmark」に入っている「test-1080p.mkv」を
　　　バッチファイルと同じフォルダに置いて下さい。

　１．以下のバイナリをダウンロードし、適切な名前にして
　　　バッチファイルと同じ場所にあるbinフォルダの下に置く必要があります。
　　　バイナリの詳細についてはbinフォルダ内のテキストも参照して下さい。

　　　●CPU-Z
　　　　・URL： http://www.cpuid.com/softwares/cpu-z.html
　　　　・「cpuz_x64.exe」「cpuz_x32.exe」「cpuz.ini」をbinフォルダに置いて下さい。

　　　●ffmpeg
　　　　・URL： http://ffmpeg.zeranoe.com/builds/ など
　　　　・「ffmpeg.exe」をbinフォルダに置いて下さい。

　　　●x264
　　　　・URL： http://komisar.gin.by/ など
　　　　・ファイル名を「x264.exe」にしてbinフォルダに置いて下さい。
　　　　・y4m入力/mkv出力にしているので、大抵のビルドで動作すると思います。

　　　●x265
　　　　・URL： http://rigaya34589.blog135.fc2.com/ など
　　　　・ファイル名を「x265.exe」にしてbinフォルダに置いて下さい。
　　　　・y4m入力/raw出力にしているので、大抵のビルドで動作すると思います。

　　　●QSVEncC / NVEncC / VCEEncC
　　　　・URL： http://rigaya34589.blog135.fc2.com/
　　　　・サンプルとして同梱している**EncC用のベンチマークバッチを実行する場合に必要です。
　　　　　GPUのハードウェアエンコード機能を利用したエンコードテストができます。
　　　　・上記URLからQSVEnc/NVEnc/VCEEncをダウンロードします。
　　　　　これらはAviUtl用の出力プラグインでもありますが、
　　　　　それとは別にコマンドライン用の「**EncC」が含まれており、
　　　　　ベンチマークバッチではそちらを利用します。
　　　　・ダウンロードしたアーカイブの中に、「QSVEncC」「NVEncC」「VCEEncC」という
　　　　　フォルダがありますので、それを丸ごとbinフォルダに置いて下さい。


　２．動画ファイルとバイナリを置いたら、あとはバッチを実行するだけです。
　　　基本的には、一括実行を行って結果を取得することになります。

　　　■一括実行を行う場合
　　　　「_1__これをダブルクリックするとx265とx264のベンチマークとシステム情報の取得を一括実行します.bat」を
　　　　ダブルクリックすると、処理が始まります。
　　　　　　１．x265ベンチマークを最小化ウィンドウで起動
　　　　　　２．少し待ってからCPU-Zを起動してログを取得
　　　　　　　　　※ユーザーアカウント制御で起動許可を求められますので許可して下さい。
　　　　　　３．x265ベンチマークの終了を待つ
　　　　　　４．264ベンチマークを実行
　　　　　　５．ログからシステム情報を抽出
　　　　という流れで処理が進みますので、あとは表示にしたがって結果が出るのを待って下さい。
　　　　結果は
　　　　　　「ベンチマークの結果.txt」
　　　　に保存されます。
　　　　最後に注意点が表示されますので、必要に応じて結果を編集して下さい。

　　　■個別実行を行う場合
　　　　バッチファイルは主に
　　　　　　・一括実行バッチ（システム情報収集バッチとベンチマークバッチを呼び出してるだけ）
　　　　　　・システム情報収集支援バッチ
　　　　　　・ベンチマークバッチ
　　　　　　・時間計測用バッチ（worktime.bat）
　　　　の４種に分かれています。
　　　　システム情報収集支援バッチとベンチマークバッチは、単独でも実行することができます。

　　　　●システム情報収集支援バッチの実行

　　　　　・「_Env1__システム情報のフル取得だけ行いたい場合はこれをダブルクリック.bat」が
　　　　　　　システム情報収集バッチの本体です。
　　　　　　　これをダブルクリックすると、CPU-Zの実行許可を求めるユーザーアカウント制御の
　　　　　　　ダイアログが出ます。自己責任となりますが、「はい」を選ぶと処理を開始できます。
　　　　　　　CPU-Zでシステム情報の収集を行い、そのログから必要情報を抽出し、結果を
　　　　　　　　「システム情報の取得だけ行った結果.txt」
　　　　　　　に追記(※)します。このバッチでは取れる主要情報を全て表示します。
　　　　　　　最後に注意点が表示されますので、必要に応じて結果を編集して下さい。

　　　　　・「_Env2__*」〜「_Env5__*」はシステム情報の一部だけを取得するバッチです。
　　　　　　それぞれで取得する内容が異なります。
　　　　　　　　X264BENCH： x264/x265ベンチマーク用
　　　　　　　　NORMAL：　　システム情報全般(一部省略)
　　　　　　　　SIMPLE：　　主要情報だけをシンプルに
　　　　　　　　CPUZ_BENCH：CPU-Zベンチマークスレ用

　　　　　　※追記ですので、既にファイルが存在している場合は、その最後に結果が追記されます。

　　　　●ベンチマークバッチの実行
　　　　　「_A__x265ベンチマークだけ行いたい場合はこれをダブルクリック.bat」などが
　　　　　　ベンチマークバッチです。
　　　　　　これらをダブルクリックすると、それぞれのバッチが担当する
　　　　　　ベンチマーク（エンコード）が実行され、結果が
　　　　　　　　「ベンチマークの結果.txt」
　　　　　　に追記(※)されます。

　　　　　　※追記ですので、既にファイルが存在している場合は、その最後に結果が追記されます。


　３．ベンチマークを行ったら、２ちゃんねる(2ch.net)の自作板にある
　　　以下のスレッドに結果を貼り付けると良いでしょう。
　　　特に発売されたばかりの新CPUでのテスト結果などは歓迎されると思います。
　　　また、オーバークロックの設定状態など、補足説明もあるとよいでしょう。

　　　　【x264+Avisynth】実用エンコベンチ Part5.1
　　　　　http://egg.2ch.net/test/read.cgi/jisaku/1460032466/


　４．おまけ機能

　　●別の動画でのベンチマーク実行機能
　　　　一括実行バッチや、各種ベンチマークバッチは、ダブルクリックすると
　　　　同じフォルダにある「test-1080p.mkv」を入力動画として
　　　　ベンチマークを行うようになっていますが、
　　　　動画をバッチファイルにＤ＆Ｄすると、その動画を入力動画として
　　　　ベンチマークを行うことができます。
　　　　例えば一括実行バッチに４Ｋ動画を渡せば、
　　　　それでベンチマークを一括実行できるということです。

　　　　ただし、以下のような制限があります。
　　　　　・RGBフォーマットの動画は使えません。(ffmpegがどのYUV形式に変換すればよいか判断できない)
　　　　　・高深度(10bitや12bit)の動画については、当面は
　　　　　　サンプリング形式が4:2:0のものだけにしておいたほうが良いと思います。
　　　　　　(2017/7/30時点ではrigaya氏の**Encの一部で高深度の4:2:2/4:4:4がうまくエンコードできない)
　　　　　　(x264/x265については多分高深度4:2:2/4:4:4も問題無い)
　　　　　　(ただ、x265はサンプリング形式の相互変換ができないので、
　　　　　　　4:2:2や4:4:4を入力するとそのままの形でエンコードされるので注意)
　　　　　・AvisynthまたはAviSynth+がインストールされていれば、avsファイルも渡せるはずです。
　　　　　　ただし高深度の場合はAviSynth+の高深度カラーフォーマットにしておく必要があります。
　　　　　　(AviSynthの16bit hackのままではうまくいかないということです)
　　　　　・QSVEnc等のハードウェアエンコードサンプルについては、
　　　　　　渡せるのはQSVEnc等でハードウェアデコードできる形式の動画に限られます。


■バッチファイルのライセンスについて

　NYSL準拠です。　→ http://www.kmonos.net/nysl/

　あえて付け加えるならば、SITNYSKBKOULです。

　※SITNYSKBKOULとは
　　→「責任は一切とらないけど煮るなり焼くなり好きにしてもらって構わないし
　　　　バグ修正や改善点は教えてもらえると嬉しいライセンス」の意。

